import random
import math
path="scripts/Post-Processing"

def toneExpand(left,right):
    def resonate(left_,right_,del1,del2):
        def inner():
            left  = sf.Concatenate(left_ ,sf.Silence(120000))
            right = sf.Concatenate(right_,sf.Silence(120000))
            
            leftA  = sf.Mix(
                sf.Pcnt90(sf.Finalise(sf.ResonantFilter(+left  ,0.9,0.5,del1[0]))),
                sf.Pcnt10(sf.Finalise(sf.ResonantFilter(+right ,0.9,0.5,del1[1])))
            )
            
            rightA = sf.Mix(
                sf.Pcnt90(sf.Finalise(sf.ResonantFilter(right ,0.9,0.5,del2[0]))),
                sf.Pcnt10(sf.Finalise(sf.ResonantFilter(left  ,0.9,0.5,del2[1])))
            )
            return leftA,rightA
        return sf_do(inner)
    
    def excite(sig_,mix,power):
        def exciteInner():
            sig=sig_
            m=sf.Magnitude(+sig)
            sigh=sf.BesselHighPass(+sig,500,2)
            mh=sf.Magnitude(+sigh)
            sigh=sf.Power(sigh,power)
            sigh=sf.Clean(sigh)
            sigh=sf.BesselHighPass(sigh,1000,2)
            nh=sf.Magnitude(+sigh)
            sigh=sf.NumericVolume(sigh,mh/nh)
            sig=sf.Mix(sf.NumericVolume(sigh,mix),sf.NumericVolume(sig,1.0-mix))
            n=sf.Magnitude(+sig)
            return sf.Realise(sf.NumericVolume(sig,m/n))
        return sf_do(exciteInner)
        
    def highDamp(sig,freq,fact):
        def highDampInner():
            hfq=sf.BesselHighPass(+sig,freq,4)
            ctr=sf.FixSize(sf.Follow(sf.FixSize(+hfq),0.25,0.5))
            ctr=sf.Clean(ctr)
            ctr=sf.RBJLowPass(ctr,8,1)
            ctr=sf.DirectMix(
                1,
                sf.NumericVolume(
                    sf.FixSize(sf.Invert(ctr)),
                    fact
                )
            )
            hfq=sf.Multiply(hfq,ctr)
            return sf.Mix(hfq,sf.BesselLowPass(sig,freq,4))
        return sf_do(highDampInner)
    
    def lowDamp(sig,freq,fact):
        def lowDampInner():
            hfq=sf.BesselLowPass(+sig,freq,4)
            ctr=sf.FixSize(sf.Follow(sf.FixSize(+hfq),0.15,1.0))
            ctr=sf.Clean(ctr)
            ctr=sf.RBJLowPass(ctr,8,1)
            ctr=sf.DirectMix(
                1,
                sf.NumericVolume(
                    sf.FixSize(sf.Invert(ctr)),
                    fact
                )
            )
            hfq=sf.Multiply(hfq,ctr)
            return sf.Mix(hfq,sf.BesselHighPass(sig,freq,4))
        return sf_do(lowDampInner)
    
    def filter(sig_,hPoint=5000,lPoint=128,hFact=0.66,lFact=0.66,mix=0.15,power=1.05):
        def filterInner():
            sig=sig_
            q=0.5
            print "Clean"
            sig=sf.Finalise(sig)
            sig=sf.RBJHighPass(sig,16,2)
            sig=sf.Finalise(sig)
            print "Warm and excite"
            sig=sf.Mix(
                sf.Pcnt10(sf.FixSize(sf.WaveShaper(-0.03*q,0.2*q,0,-1.0*q,0.2*q,2.0*q,+sig))),
                excite(sig,mix,power)
            )
            
            print "Bass Boost"
            sig=sf.RBJPeaking(sig,32,2,2)
            #damp=sf.BesselLowPass(+sig,2000,1)
            #sig=sf.FixSize(sf.Mix(damp,sig))
            
            print "Saturate:"
            low=sf.BesselLowPass(+sig,256,4)
            m1=sf.Magnitude(+low)
            low=sf.FixSize(low)
            low=sf.Saturate(low)
            m2=sf.Magnitude(+low)
            low=sf.NumericVolume(low,m1/m2)
            sig=sf.BesselHighPass(sig,256,4)
            sig=sf.Mix(low,sig)
            
            print "Band compress/expand"
            sig=lowDamp( sig,lPoint,lFact)
            sig=highDamp(sig,hPoint,hFact)
            return sf.FixSize(sf.Clean(sig))
        return sf_do(filterInner)
    
    def lp(sig,freq):
        def inner():
            return sf.RBJLowPass(sig,freq,1,2)
        return sf_do(inner)
    
    def hp(sig,freq):
        def inner():
            return sf.RBJHighPass(sig,freq,1,2)
        return sf_do(inner)
        
    
    print "Reasonate"
    leftC,rightC=resonate(+left,+right,(43,93),(44,94))
    leftA,rightA=resonate(+left,+right,(31,47),(32,45.5))
    leftA  =lp(leftA,2000)
    rightA =lp(rightA,2000)
    leftB,rightB=resonate(+leftA,+rightA,(91,256),(93,247))
    leftB  =lp(leftB, 500)
    rightB =lp(rightB,500)
    leftC  =hp(leftC, 2000)
    rightC =hp(rightC,2000)
    
    def mix(a,b,c,d):
        def inner():
            return sf.Mix(
            sf.Pcnt50(a),
            sf.Pcnt15(b),
            sf.Pcnt15(c),
            sf.Pcnt15(d)
            )
        return sf_do(inner)
    
    left   = mix(left, leftA, leftB, leftC)
    right  = mix(right,rightA,rightB,rightC)
        
    left  = filter(left ,hPoint=2500,lPoint=128,hFact=2.25,lFact=0.66,mix=0.25,power=1.25)
    right = filter(right,hPoint=2500,lPoint=128,hFact=2.25,lFact=0.66,mix=0.25,power=1.25)
    return (left,right)

def granularReverb(signal,ratio,delay,density,length=50,stretch=1,vol=1):
    print "Granular reverb: ratio:",ratio," delay:",delay," density",density," length:",length," stretch:",stretch," volume:",vol
    def granularReverbInner():
        out=[]
        for grain in sf.Granulate(signal,length,10):
            (signal_i,at)=grain
            signal_i=sf.Realise(signal_i)
            signal_i=sf.Realise(sf.DirectRelength(signal_i,ratio-0.01+(0.02*random.random())))
            for x in range(0,density):
                out.append(
                    (
                        +signal_i,
                        int((at + (random.random()+random.random())*delay)*stretch)
                    )
                )
            -signal_i
      
        out=sf.Realise(sf.MixAt(out))
        out=sf.Realise(sf.NumericVolume(out,vol))
        return out
    return sf_do(granularReverbInner)

def reverbInner(signal,convol,grainLength):
    def reverbInnerDo():
        mag=sf.Magnitude(+signal)
        if mag>0:
            signal_=sf.Concatenate(signal,sf.Silence(grainLength))
            len=sf.Length(+signal_)
            signal_=sf.FrequencyDomain(signal_)
            signal_=sf.CrossMultiply(convol,signal_)
            signal_=sf.TimeDomain(signal_)
            newMag=sf.Magnitude(+signal_)
            signal_=sf.NumericVolume(signal_,mag/newMag)        
            # tail out clicks due to amplitude at end of signal
            return sf.Realise(sf.Clean(sf.Cut(0,len,signal_)))
        else:
            -convol
            return sf.Realise(signal)
            
    return sf_do(reverbInnerDo)

def reverberate(signal,convol):
    print "Reverberate"
    grainLength = sf.Length(+convol)
    convol_=sf.FrequencyDomain(sf.Concatenate(convol,sf.Silence(grainLength)))
    signal_=sf.Concatenate(signal,sf.Silence(grainLength))
    out=[]
    for grain in sf.Granulate(signal_,grainLength):
        (signal_i,at)=grain
        signal_i=sf.Realise(signal_i)
        out.append((reverbInner(signal_i,+convol_,grainLength),at))
    -convol_
    return sf.Clean(sf.Normalise(sf.MixAt(out)))
 
def doRev(signal,revSignal):
    def doRevInner():
        sig=sf.Mix(
            granularReverb(+signal ,0.125,229.0,  8,1024,8,1.0),
            granularReverb(+signal ,0.125,563.0,  8,1024,8,1.0),
            granularReverb(+signal ,0.25 ,241.0,  8, 256,8,1.0),
            granularReverb(+signal ,1.0  ,307.0, 16, 128,8,0.5),
            granularReverb(+signal ,2.0  ,373.0,256, 512,8,0.25),
            granularReverb(signal  ,4.0  ,487.0,256, 512,8,0.25)
        )
        
        return reverberate(sig,revSignal)
    return sf_do(doRevInner)
        
left,right=sf.ReadFile("temp/input.wav")

(revl,t)=sf.ReadFile("temp/impulses/ultra-l.wav")
(revr,t)=sf.ReadFile("temp/impulses/ultra-r.wav")
revl=sf.Finalise(sf.Power(revl,1.5))
revr=sf.Finalise(sf.Power(revr,1.5))
leftw  = doRev(+left,revl)
rightw = doRev(+right,revr)
leftw,rightw=tonExpand(leftw,rightw)
(revl,t)=sf.ReadFile("temp/impulses/revl-church.wav")
(revr,t)=sf.ReadFile("temp/impulses/revr-church.wav")
lefth  = doRev(left,revl)
righth = doRev(right,revr)
lefth,righth=tonExpand(lefth,righth)
left  = sf.Finalise(sf.MixAt((leftw,30),(lefth,10)))
right = sf.Finalise(sf.MixAt((rightw,30),(righth,0)))
sf.WriteFile32((left,right),"temp/output.wav")
