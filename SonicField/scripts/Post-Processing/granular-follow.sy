import random
import math
path="scripts/Post-Processing"
#execfile(path+"/chorus.sy")
def granularReverb(signal,ratio,delay,density,length=50,stretch=1,vol=1):
    print "Granular reverb: ratio:",ratio," delay:",delay," density",density," length:",length," stretch:",stretch," volume:",vol
    def granularReverbInner():
        out=[]
        for grain in sf.Granulate(signal,length,10):
            (signal_i,at)=grain
            signal_i=sf.Realise(signal_i)
            signal_i=sf.Realise(sf.DirectRelength(signal_i,ratio-0.01+(0.02*random.random())))
            for x in range(0,density):
                out.append(
                    (
                        +signal_i,
                        int((at + (random.random()+random.random())*delay)*stretch)
                    )
                )
            -signal_i
      
        out=sf.Realise(sf.MixAt(out))
        out=sf.Realise(sf.NumericVolume(out,vol))
        return out
    return sf_do(granularReverbInner)

def reverbInner(signal,convol,grainLength):
    def reverbInnerDo():
        mag=sf.Magnitude(+signal)
        if mag>0:
            signal_=sf.Concatenate(signal,sf.Silence(grainLength))
            signal_=sf.FrequencyDomain(signal_)
            signal_=sf.CrossMultiply(convol,signal_)
            signal_=sf.TimeDomain(signal_)
            newMag=sf.Magnitude(+signal_)
            signal_=sf.NumericVolume(signal_,mag/newMag)        
            # tail out clicks due to amplitude at end of signal 
            return sf.Realise(sf.Clean(signal_))
        else:
            -convol
            return sf.Realise(signal)
            
    return sf_do(reverbInnerDo)

def reverberate(signal,convol):
    print "Reverberate"
    grainLength = sf.Length(+convol)
    convol_=sf.FrequencyDomain(sf.Concatenate(convol,sf.Silence(grainLength)))
    signal_=sf.Concatenate(signal,sf.Silence(grainLength))
    out=[]
    for grain in sf.Granulate(signal_,grainLength):
        (signal_i,at)=grain
        signal_i=sf.Realise(signal_i)
        out.append((reverbInner(signal_i,+convol_,grainLength),at))
    -convol_
    return sf.Clean(sf.Normalise(sf.MixAt(out)))
 
def doRev(signal,revSignal):
    def doRevInner():
        sig=sf.Mix(
            granularReverb(+signal ,0.25,11.0,  8,256,4,1.0),
            granularReverb(+signal ,1.0, 13.0, 16,128,4,0.5),
            granularReverb(+signal  ,2.0,17.0,256,512,4,0.25),
            granularReverb(signal  ,4.0, 23.0,256,512,4,0.25),         
        )
        return reverberate(sig,revSignal)
    return sf_do(doRevInner)
        
left,right=sf.ReadFile("temp/c.wav")
(revl,t)=sf.ReadFile("temp/impulses/revr-church.wav")
(revr,t)=sf.ReadFile("temp/impulses/revr-church.wav")
leftw  = doRev(left,revl)
rightw = doRev(right,revr)
left  = sf.Finalise(leftw)
right = sf.Finalise(rightw)
sf.WriteFile32((left,right),"temp/d.wav")
