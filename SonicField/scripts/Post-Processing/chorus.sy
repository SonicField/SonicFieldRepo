import math
sf.SetSampleRate(96000)
if not 'random' in dir():
    import random
    random.seed(System.currentTimeMillis())

def bandRand(min,max):
    min=float(min)
    max=float(max)
    r1=random.random()
    r2=random.random()
    r=float(r1+r2)*0.5
    r=r*(max-min)
    r=r+min
    return r

@sf_parallel
def chorus(
    left,
    right,
    minDepth = 10.0,
    maxDepth = 50.0,
    maxRate  =  0.1,
    minRate  =  0.05,
    nChorus  =  4.0,
    minVol   =  0.7,
    maxVol   =  1.0):
    def inner(signal_):
        def inner_():
            signal=sf.Clean(signal_)
            sigs=[]
            l=sf.Length(+signal)
            for inst in range(0,int(nChorus)):
                @sf_parallel
                def in_inner():
                    print "Do"
                    lfo=sf.PhasedSineWave(l,bandRand(minRate,maxRate),random.random())
                    lfo=sf.NumericVolume(lfo,bandRand(minDepth,maxDepth))
                    nsg=sf.TimeShift(+signal,lfo)
                    lfo=sf.PhasedSineWave(l,bandRand(minRate,maxRate),random.random())
                    lfo=sf.NumericVolume(lfo,bandRand(minVol,maxVol))
                    lfo=sf.DirectMix(1,lfo)
                    nsg=sf.Multiply(lfo,nsg)
                    print "Done"
                    return sf.Finalise(nsg)
                sigs.append(in_inner())
            ret=sf.Finalise(sf.Mix(sigs))
            -signal
            return ret
        return inner_()
    
    return inner(left),inner(right)
    
sig = sf.ReadFile("temp/input.wav")[0]

@sf_parallel
def spatialise(sig):
    osg = +sig
    
    dhz = 0.5
    dly = 1000.0/float(dhz)
    md1 = sf.SineWave(sf.Length(+sig),math.pow(2.0,0.5)*0.090)
    md2 = sf.Pcnt25(sf.SineWave(sf.Length(+sig),math.pow(2.0,0.5)*0.085))
    md1 = sf.NumericVolume(sf.Mix(md1,md2),1000)
    sgs = sf.AnalogueChorus(sig,dly,md1,1.1,0.8)

    dly = 250.0
    md1 = sf.SineWave(sf.Length(+osg),0.1)
    md1 = sf.NumericVolume(+md1,100)
    osg = sf.AnalogueChorus(osg,dly,md1,0.8,0.8)

    return[ sf.FixSize(sf.Mix(s)) for s in zip(sgs,osg) ]
    
left,right = spatialise(sig)

left1,right1=chorus(
    +left,
    +right,
    minDepth = 10.0,
    maxDepth = 40.0,
    minVol   =  0.7,
    maxVol   =  1.0,
    nChorus  =  8.0)

'''
left2,right2=chorus(
    +left1,
    +right1,
    minDepth = 10.0,
    maxDepth = 50.0,
    maxRate  =  0.1,
    minRate  =  0.05,
    nChorus  =  4.0,
    minVol   =  0.7,
    maxVol   =  1.0)

left  = sf.Mix(left1 ,left2)
right = sf.Mix(right1,right2)
'''
left  = sf.Finalise(sf.RBJPeaking(left ,64,1,8))
right = sf.Finalise(sf.RBJPeaking(right,64,1,8))


left  = sf.Finalise(sf.RBJPeaking(sf.Mix(left,left1)  ,128,1,8))
right = sf.Finalise(sf.RBJPeaking(sf.Mix(right,right1),128,1,8))

sf.WriteFile32((left,right),"temp/c.wav")
