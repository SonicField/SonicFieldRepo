[ This script accedentally made a
  believable banjo sound. This is not 
  what it was for but making a banjo 
  should be really hard so this is good
  luck!
]

{
	(
	    1,18,
	    {
	        (?pitch,?string)ListAddEnd !string
			(?pitch,SF.Semitone)Prod   !pitch
	    }
	)Repeat
	?string
} _getFrets

List            !string
"E2" SF.Note    !pitch
_getFrets Do Done _S6 PrintLn

List            !string
"A3" SF.Note    !pitch
_getFrets Do Done _S5 PrintLn

List            !string
"D3" SF.Note    !pitch
_getFrets Do Done _S4 PrintLn

List            !string
"G3" SF.Note    !pitch
_getFrets Do Done _S3 PrintLn

List            !string
"B4" SF.Note    !pitch
_getFrets Do Done _S2 PrintLn

List            !string
"E4" SF.Note    !pitch
_getFrets Do Done _S1 PrintLn

{
	{
		(2.5,(0.5,Maths.Random)Prod)Sum !q
		[ Generate the input pulse ]
		(?frequency,?q)Prod   !f1
		(?f1,3.0)Prod         !f2
		(?f1,5.0)Prod         !f4
		
		(1000,?f1)Quot        !t

		(?t,?f1) SF.SinWave SFAMP.MakeSquare   SF.Normalise               !pulse1
		((?t,?f2)SF.SinWave SFAMP.MakeTriangle SF.Normalise,-6)SF.Volume  !pulse2
		((?t,?f4)SF.SinWave SFAMP.MakeTriangle SF.Normalise,-12)SF.Volume !pulse4
		(?pulse1,?pulse2,?pulse4)SF.Add SF.Normalise                      !pulse
		[Not attenuating makes the sound very brilliant and
		 banjo like]
		(?pulse,((0,1),(?t,1))SFShape.Numeric)SF.Multiply                 !pulse

	} Do Done !pulse

	(1000,?frequency)Quot                                                 !period
	("Pluck pulse length: ",?pulse SF.Length)StrCat Println
	( 
		?pulse,
		(	
			(
				[(?period,?pulse SF.Length)Diff,]
				?period,
				(?frequency,0.55)Prod
			)SF.SinWave SFAMP.MakeTriangle
			,
			0 [ again, no attenuation makes the sound brilliant ]
		)SF.Volume
	) SF.Add                                                              !pulse
	?pulse SF.Length                                                      !len

	("Pulse length after resonance will be: ",?len, "ms")StrCat PrintLn
	("Requested Frequency: ",?frequency, " computed is ",(1000,?len)Quot ,"hz")StrCat PrintLn

	?pulse SF.Normalise                    !pulse
	List !output

	[ Damped Resonator ] 
	?pulse !input
	(
	   (((?frequency,0.4)Power,1500)Quot,0.16)Sum !gain Println
	   [
	     1.0 is the longest conceivable continuous
	     play on the string
	   ]
	   (?gain,0.8)Prod                            !gain
	   [ 
	     100 as cycles is long enought for the longest string 
	     play. 10 is realistic for more normal guitar
	   ]
	   1,(?frequency,10)Prod,
		{
			(?input,>output)ListAddEnd !output
			(
				(
					?input,
					0.5
				)SF.NumericVolume,
				(
					?input SF.Reverse SF.Invert,
					0.5
				)SF.NumericVolume 
			)SF.Add !input
			(?input, ?gain)Sf.Volume SF.RemoveDC         !input
			[ The IIR filter should be a very bad idea
			  because it delays the signal (rotates phase) which
			  causes odd shifting effects and adds new high frequencies
			  as the wave form does not fit properly with the 
			  resonant frequency. But, this just so happens to make
			  it sound like the resonating chamber is a drum - luck!
			  
			  BTW - I know the bessel filter should not introduce 
			  phase shift - but it does! This may well be an artefact
			  of the digital implementation
			]
			(?input,?frequency,1)SFFilter.NLowPassBessel !filt
			(
				(
					>input,
					0.9
				)SF.NumericVolume,
				(
					>filt,
					0.1
				)SF.NumericVolume 
			)SF.Add !input
		}    
	)Repeat
	?output SF.Concatenate !left
	
	[ Chomp off unwanted hf noise]
	[(?left SF.Normalise,(?frequency,3)Prod,2)SFFilter.NLowPass !left 
	(?left SF.Normalise,(?frequency,5)Prod,6)SFFilter.NLowPass !left 
	]
	[ Damp the pluck
		Tune the levels. The less reduced
		the initial pluck the more flocksy
		it sounds
	]
	(
		(0,-4),
		(?pulse SF.Length,-1),
		((?pulse SF.Length,4)Prod,0),
		(?left SF.Length,0)
	)SFShape.Simple                                     !shape
	(>shape,>left)SF.Multiply                           !left
	(?left SF.Length SF.WhiteNoise,?left)SF.Multiply    !noise
	(>noise,3,3)SFFilter.NLowPass                       !noise
	(((0,1),(100,0))SFShape.Numeric,>noise)SF.Multiply  !noise
	((?noise,-3)SF.Volume,?left)SF.Add                  !left
	[ Tune these to get the output sound wanted. The IIR
	  filter delay issue injects so much high frequency that
	  a lot of damping is needed. The resonator makes far too
	  much fundamental so we need to get rid of some of that
	  as well
	]
	(?left SF.Normalise,?frequency,1)SFFilter.NHighPass !left
	(?left,(?frequency,1.5)Prod,4)SFFilter.NLowPass     !left 
	
} _pluck


333 _beat
0   !time
{(?time,(_beat,2)Quot)Sum !time} _nextHBeat
{(?time,_beat)Sum !time}         _nextSBeat
{(?time,(_beat,2)Prod)Sum !time} _nextDBeat
(_beat,12)Prod                   _2bar
(_beat, 6)Prod                   _1bar


1 SF.Silence !ret6
1 SF.Silence !ret5
1 SF.Silence !ret4
1 SF.Silence !ret3
1 SF.Silence !ret2
1 SF.Silence !ret1

{ ?data !ret6 } _set6
{ ?data !ret5 } _set5
{ ?data !ret4 } _set4
{ ?data !ret3 } _set3
{ ?data !ret2 } _set2
{ ?data !ret1 } _set1
{ ?ret6 } _get6
{ ?ret5 } _get5
{ ?ret4 } _get4
{ ?ret3 } _get3
{ ?ret2 } _get2
{ ?ret1 } _get1

50 !f
(
[
	((             ?f),0,     0,_get6,_set6),
	(((1.5,?f)Prod !f),0, 20000,_get3,_set3),
	(((1.5,?f)Prod !f),0, 40000,_get3,_set3),
	(((1.5,?f)Prod !f),0, 60000,_get3,_set3),
	(((1.5,?f)Prod !f),0, 80000,_get3,_set3),
	(((1.5,?f)Prod !f),0,100000,_get3,_set3),
	(((1.5,?f)Prod !f),0,120000,_get3,_set3)
]

[1]
	(_s6,0,_nextDBeat Invoke,_get6,_set6),
	(_s3,2,_nextDBeat Invoke,_get3,_set3),
	(_s2,1,_nextHBeat Invoke,_get2,_set2),
	(_s1,0,_nextHBeat Invoke,_get1,_set1),
	(_s2,1,_nextSBeat Invoke,_get2,_set2),
	(_s3,0,_nextSBeat Invoke,_get3,_set3),
[2]
	(_s5,3,_nextSBeat Invoke,_get5,_set5),
	(_s3,0,_nextDBeat Invoke,_get3,_set3),
	(_s2,1,_nextHBeat Invoke,_get2,_set2),
	(_s1,0,_nextHBeat Invoke,_get1,_set1),
	(_s2,1,_nextSBeat Invoke,_get2,_set2),
	(_s3,0,_nextSBeat Invoke,_get3,_set3),
[3]
	(_s4,0,_nextSBeat Invoke,_get4,_set4),
	(_s3,2,_nextDBeat Invoke,_get3,_set3),
	(_s2,3,_nextHBeat Invoke,_get2,_set2),
	(_s1,2,_nextHBeat Invoke,_get1,_set1),
	(_s2,3,_nextSBeat Invoke,_get2,_set2),
	(_s3,2,_nextSBeat Invoke,_get3,_set3),
[4]
	(_s4,3,_nextSBeat Invoke,_get4,_set4),
	(_s3,2,_nextDBeat Invoke,_get3,_set3),
	(_s2,1,_nextHBeat Invoke,_get2,_set2),
	(_s1,0,_nextHBeat Invoke,_get1,_set1),
	(_s2,1,_nextSBeat Invoke,_get2,_set2),
	(_s3,2,_nextSBeat Invoke,_get3,_set3),
[5]
	(_s5,0,_nextSBeat Invoke,_get5,_set5),
	(_s3,2,_nextDBeat Invoke,_get3,_set3),
	(_s2,1,_nextHBeat Invoke,_get2,_set2),
	(_s1,0,_nextHBeat Invoke,_get1,_set1),
	(_s2,1,_nextSBeat Invoke,_get2,_set2),
	(_s3,2,_nextSBeat Invoke,_get3,_set3),
[6]
	(_s5,3,_nextSBeat Invoke,_get5,_set5),
	(_s3,0,_nextDBeat Invoke,_get3,_set3),
	(_s2,1,_nextHBeat Invoke,_get2,_set2),
	(_s1,0,_nextHBeat Invoke,_get1,_set1),
	(_s2,1,_nextSBeat Invoke,_get2,_set2),
	(_s3,0,_nextSBeat Invoke,_get3,_set3),
[7]
	(_s6,0,_nextSBeat Invoke,_get6,_set6),
	(_s3,1,_nextDBeat Invoke,_get3,_set3),
	(_s2,0,_nextHBeat Invoke,_get2,_set2),
	(_s1,0,_nextHBeat Invoke,_get1,_set1),
	(_s2,0,_nextSBeat Invoke,_get2,_set2),
	(_s3,1,_nextSBeat Invoke,_get3,_set3),
[8]
	(_s6,0,_nextSBeat Invoke,_get6,_set6),
	(_s3,1,_nextDBeat Invoke,_get3,_set3),
	(_s2,2,_nextHBeat Invoke,_get2,_set2),
	(_s1,0,_nextHBeat Invoke,_get1,_set1),
	(_s2,2,_nextSBeat Invoke,_get2,_set2),
	(_s3,1,_nextSBeat Invoke,_get3,_set3),
[9]
	(_s5,0,_nextSBeat Invoke,_get5,_set5),
	(_s3,2,_nextDBeat Invoke,_get3,_set3),
	(_s2,1,_nextHBeat Invoke,_get2,_set2),
	(_s1,0,_nextHBeat Invoke,_get1,_set1),
	(_s2,1,_nextSBeat Invoke,_get2,_set2),
	(_s3,0,_nextSBeat Invoke,_get3,_set3),
[10]
	(_s5,3,_nextSBeat Invoke,_get5,_set5),
	(_s3,0,_nextDBeat Invoke,_get3,_set3),
	(_s2,1,_nextHBeat Invoke,_get2,_set2),
	(_s1,0,_nextHBeat Invoke,_get1,_set1),
	(_s2,1,_nextSBeat Invoke,_get2,_set2),
	(_s3,0,_nextSBeat Invoke,_get3,_set3),
[11]
	(_s4,0,_nextSBeat Invoke,_get4,_set4),
	(_s3,2,_nextDBeat Invoke,_get3,_set3),
	(_s2,3,_nextHBeat Invoke,_get2,_set2),
	(_s1,2,_nextHBeat Invoke,_get1,_set1),
	(_s2,3,_nextSBeat Invoke,_get2,_set2),
	(_s3,2,_nextSBeat Invoke,_get3,_set3),
[12]
	(_s4,3,_nextSBeat Invoke,_get4,_set4),
	(_s3,2,_nextDBeat Invoke,_get3,_set3),
	(_s2,1,_nextHBeat Invoke,_get2,_set2),
	(_s1,0,_nextHBeat Invoke,_get1,_set1),
	(_s2,1,_nextSBeat Invoke,_get2,_set2),
	(_s3,2,_nextSBeat Invoke,_get3,_set3),

[13]
	(_s5,0,_nextSBeat Invoke,_get5,_set5),
	(_s3,2,_nextDBeat Invoke,_get3,_set3),
	(_s2,1,_nextHBeat Invoke,_get2,_set2),
	(_s1,0,_nextHBeat Invoke,_get1,_set1),
	(_s2,1,_nextSBeat Invoke,_get2,_set2),
	(_s3,2,_nextSBeat Invoke,_get3,_set3),
[14]
	(_s6,0,_nextSBeat Invoke,_get6,_set6),
	(_s3,1,_nextDBeat Invoke,_get3,_set3),
	(_s2,2,_nextHBeat Invoke,_get2,_set2),
	(_s1,0,_nextHBeat Invoke,_get1,_set1),
	(_s2,2,_nextSBeat Invoke,_get2,_set2),
	(_s3,1,_nextSBeat Invoke,_get3,_set3),
[15]
	(_s5,0,_nextSBeat Invoke,_get5,_set5),
	(_s3,2,_nextDBeat Invoke,_get3,_set3),
	(_s2,1,_nextHBeat Invoke,_get2,_set2),
	(_s1,0,_nextHBeat Invoke,_get1,_set1),
	(_s2,1,_nextSBeat Invoke,_get2,_set2),
	(_s3,2,_nextSBeat Invoke,_get3,_set3),

[16]
	(_s5,3,_nextSBeat Invoke,_get5,_set5),
	(_s3,2,_nextDBeat Invoke,_get3,_set3),
	(_s2,1,_nextHBeat Invoke,_get2,_set2),
	(_s1,0,_nextHBeat Invoke,_get1,_set1),
	(_s2,1,_nextSBeat Invoke,_get2,_set2),
	(_s3,2,_nextSBeat Invoke,_get3,_set3),
[17]
	(_s4,0,_nextSBeat Invoke,_get4,_set4),
	(_s3,2,_nextDBeat Invoke,_get3,_set3),
	(_s2,3,_nextHBeat Invoke,_get2,_set2),
	(_s1,2,_nextHBeat Invoke,_get1,_set1),
	(_s2,3,_nextSBeat Invoke,_get2,_set2),
	(_s3,2,_nextSBeat Invoke,_get3,_set3),
[18]
	(_s4,3,_nextSBeat Invoke,_get4,_set4),
	(_s3,2,_nextDBeat Invoke,_get3,_set3),
	(_s2,1,_nextHBeat Invoke,_get2,_set2),
	(_s1,1,_nextHBeat Invoke,_get1,_set1),
	(_s2,1,_nextSBeat Invoke,_get2,_set2),
	(_s3,2,_nextSBeat Invoke,_get3,_set3),

[19]
	(_s5,0,_nextSBeat Invoke,_get5,_set5),
	(_s3,2,_nextDBeat Invoke,_get3,_set3),
	(_s2,1,_nextHBeat Invoke,_get2,_set2),
	(_s1,0,_nextHBeat Invoke,_get1,_set1),
	(_s2,1,_nextSBeat Invoke,_get2,_set2),
	(_s3,2,_nextSBeat Invoke,_get3,_set3),
[20]
	(_s6,0,_nextSBeat Invoke,_get6,_set6),
	(_s3,1,_nextDBeat Invoke,_get3,_set3),
	(_s2,2,_nextHBeat Invoke,_get2,_set2),
	(_s1,0,_nextHBeat Invoke,_get1,_set1),
	(_s2,2,_nextSBeat Invoke,_get2,_set2),
	(_s3,1,_nextSBeat Invoke,_get3,_set3),
[21]
	(_s5,0,_nextSBeat Invoke,_get5,_set5),
	(_s3,2,_nextDBeat Invoke,_get3,_set3),
	(_s2,1,_nextHBeat Invoke,_get2,_set2),
	(_s1,0,_nextHBeat Invoke,_get1,_set1),
	(_s2,1,_nextSBeat Invoke,_get2,_set2),
	(_s3,2,_nextSBeat Invoke,_get3,_set3),
[22]
	(_s6,0,_nextSBeat Invoke,_get6,_set6),
	(_s3,1,_nextDBeat Invoke,_get3,_set3),
	(_s2,2,_nextHBeat Invoke,_get2,_set2),
	(_s1,0,_nextHBeat Invoke,_get1,_set1),
	(_s2,2,_nextSBeat Invoke,_get2,_set2),
	(_s3,1,_nextSBeat Invoke,_get3,_set3),

[1]
	(_s6,0,_nextDBeat Invoke,_get6,_set6),
	(_s3,2,_nextDBeat Invoke,_get3,_set3),
	(_s2,1,_nextHBeat Invoke,_get2,_set2),
	(_s1,0,_nextHBeat Invoke,_get1,_set1),
	(_s2,1,_nextSBeat Invoke,_get2,_set2),
	(_s3,0,_nextSBeat Invoke,_get3,_set3),
[2]
	(_s5,3,_nextSBeat Invoke,_get5,_set5),
	(_s3,0,_nextDBeat Invoke,_get3,_set3),
	(_s2,1,_nextHBeat Invoke,_get2,_set2),
	(_s1,0,_nextHBeat Invoke,_get1,_set1),
	(_s2,1,_nextSBeat Invoke,_get2,_set2),
	(_s3,0,_nextSBeat Invoke,_get3,_set3),
[3]
	(_s4,0,_nextSBeat Invoke,_get4,_set4),
	(_s3,2,_nextDBeat Invoke,_get3,_set3),
	(_s2,3,_nextHBeat Invoke,_get2,_set2),
	(_s1,2,_nextHBeat Invoke,_get1,_set1),
	(_s2,3,_nextSBeat Invoke,_get2,_set2),
	(_s3,2,_nextSBeat Invoke,_get3,_set3),
[4]
	(_s4,3,_nextSBeat Invoke,_get4,_set4),
	(_s3,2,_nextDBeat Invoke,_get3,_set3),
	(_s2,1,_nextHBeat Invoke,_get2,_set2),
	(_s1,0,_nextHBeat Invoke,_get1,_set1),
	(_s2,1,_nextSBeat Invoke,_get2,_set2),
	(_s3,2,_nextSBeat Invoke,_get3,_set3),
[5]
	(_s5,0,_nextSBeat Invoke,_get5,_set5),
	(_s3,2,_nextDBeat Invoke,_get3,_set3),
	(_s2,1,_nextHBeat Invoke,_get2,_set2),
	(_s1,0,_nextHBeat Invoke,_get1,_set1),
	(_s2,1,_nextSBeat Invoke,_get2,_set2),
	(_s3,2,_nextSBeat Invoke,_get3,_set3),
[6]
	(_s5,3,_nextSBeat Invoke,_get5,_set5),
	(_s3,0,_nextDBeat Invoke,_get3,_set3),
	(_s2,1,_nextHBeat Invoke,_get2,_set2),
	(_s1,0,_nextHBeat Invoke,_get1,_set1),
	(_s2,1,_nextSBeat Invoke,_get2,_set2),
	(_s3,0,_nextSBeat Invoke,_get3,_set3),
[7]
	(_s6,0,_nextSBeat Invoke,_get6,_set6),
	(_s3,1,_nextDBeat Invoke,_get3,_set3),
	(_s2,0,_nextHBeat Invoke,_get2,_set2),
	(_s1,0,_nextHBeat Invoke,_get1,_set1),
	(_s2,0,_nextSBeat Invoke,_get2,_set2),
	(_s3,1,_nextSBeat Invoke,_get3,_set3),
[8]
	(_s6,0,_nextSBeat Invoke,_get6,_set6),
	(_s3,1,_nextDBeat Invoke,_get3,_set3),
	(_s2,2,_nextHBeat Invoke,_get2,_set2),
	(_s1,0,_nextHBeat Invoke,_get1,_set1),
	(_s2,2,_nextSBeat Invoke,_get2,_set2),
	(_s3,1,_nextSBeat Invoke,_get3,_set3),
[9]
	(_s5,0,_nextSBeat Invoke,_get5,_set5),
	(_s3,2,_nextDBeat Invoke,_get3,_set3),
	(_s2,1,_nextHBeat Invoke,_get2,_set2),
	(_s1,0,_nextHBeat Invoke,_get1,_set1),
	(_s2,1,_nextSBeat Invoke,_get2,_set2),
	(_s3,0,_nextSBeat Invoke,_get3,_set3),
[10]
	(_s5,3,_nextSBeat Invoke,_get5,_set5),
	(_s3,0,_nextDBeat Invoke,_get3,_set3),
	(_s2,1,_nextHBeat Invoke,_get2,_set2),
	(_s1,0,_nextHBeat Invoke,_get1,_set1),
	(_s2,1,_nextSBeat Invoke,_get2,_set2),
	(_s3,0,_nextSBeat Invoke,_get3,_set3),
[11]
	(_s4,0,_nextSBeat Invoke,_get4,_set4),
	(_s3,2,_nextDBeat Invoke,_get3,_set3),
	(_s2,3,_nextHBeat Invoke,_get2,_set2),
	(_s1,2,_nextHBeat Invoke,_get1,_set1),
	(_s2,3,_nextSBeat Invoke,_get2,_set2),
	(_s3,2,_nextSBeat Invoke,_get3,_set3),
[12]
	(_s4,3,_nextSBeat Invoke,_get4,_set4),
	(_s3,2,_nextDBeat Invoke,_get3,_set3),
	(_s2,1,_nextHBeat Invoke,_get2,_set2),
	(_s1,0,_nextHBeat Invoke,_get1,_set1),
	(_s2,1,_nextSBeat Invoke,_get2,_set2),
	(_s3,2,_nextSBeat Invoke,_get3,_set3),

[13]
	(_s5,0,_nextSBeat Invoke,_get5,_set5),
	(_s3,2,_nextDBeat Invoke,_get3,_set3),
	(_s2,1,_nextHBeat Invoke,_get2,_set2),
	(_s1,0,_nextHBeat Invoke,_get1,_set1),
	(_s2,1,_nextSBeat Invoke,_get2,_set2),
	(_s3,2,_nextSBeat Invoke,_get3,_set3),
[14]
	(_s6,0,_nextSBeat Invoke,_get6,_set6),
	(_s3,1,_nextDBeat Invoke,_get3,_set3),
	(_s2,2,_nextHBeat Invoke,_get2,_set2),
	(_s1,0,_nextHBeat Invoke,_get1,_set1),
	(_s2,2,_nextSBeat Invoke,_get2,_set2),
	(_s3,1,_nextSBeat Invoke,_get3,_set3),
[15]
	(_s5,0,_nextSBeat Invoke,_get5,_set5),
	(_s3,2,_nextDBeat Invoke,_get3,_set3),
	(_s2,1,_nextHBeat Invoke,_get2,_set2),
	(_s1,0,_nextHBeat Invoke,_get1,_set1),
	(_s2,1,_nextSBeat Invoke,_get2,_set2),
	(_s3,2,_nextSBeat Invoke,_get3,_set3),

[16]
	(_s5,3,_nextSBeat Invoke,_get5,_set5),
	(_s3,2,_nextDBeat Invoke,_get3,_set3),
	(_s2,1,_nextHBeat Invoke,_get2,_set2),
	(_s1,0,_nextHBeat Invoke,_get1,_set1),
	(_s2,1,_nextSBeat Invoke,_get2,_set2),
	(_s3,2,_nextSBeat Invoke,_get3,_set3),
[17]
	(_s4,0,_nextSBeat Invoke,_get4,_set4),
	(_s3,2,_nextDBeat Invoke,_get3,_set3),
	(_s2,3,_nextHBeat Invoke,_get2,_set2),
	(_s1,2,_nextHBeat Invoke,_get1,_set1),
	(_s2,3,_nextSBeat Invoke,_get2,_set2),
	(_s3,2,_nextSBeat Invoke,_get3,_set3),
[18]
	(_s4,3,_nextSBeat Invoke,_get4,_set4),
	(_s3,2,_nextDBeat Invoke,_get3,_set3),
	(_s2,1,_nextHBeat Invoke,_get2,_set2),
	(_s1,1,_nextHBeat Invoke,_get1,_set1),
	(_s2,1,_nextSBeat Invoke,_get2,_set2),
	(_s3,2,_nextSBeat Invoke,_get3,_set3),

[19]
	(_s5,0,_nextSBeat Invoke,_get5,_set5),
	(_s3,2,_nextDBeat Invoke,_get3,_set3),
	(_s2,1,_nextHBeat Invoke,_get2,_set2),
	(_s1,0,_nextHBeat Invoke,_get1,_set1),
	(_s2,1,_nextSBeat Invoke,_get2,_set2),
	(_s3,2,_nextSBeat Invoke,_get3,_set3),
[20]
	(_s6,0,_nextSBeat Invoke,_get6,_set6),
	(_s3,1,_nextDBeat Invoke,_get3,_set3),
	(_s2,2,_nextHBeat Invoke,_get2,_set2),
	(_s1,0,_nextHBeat Invoke,_get1,_set1),
	(_s2,2,_nextSBeat Invoke,_get2,_set2),
	(_s3,1,_nextSBeat Invoke,_get3,_set3),
[21]
	(_s5,0,_nextSBeat Invoke,_get5,_set5),
	(_s3,2,_nextDBeat Invoke,_get3,_set3),
	(_s2,1,_nextHBeat Invoke,_get2,_set2),
	(_s1,0,_nextHBeat Invoke,_get1,_set1),
	(_s2,1,_nextSBeat Invoke,_get2,_set2),
	(_s3,2,_nextSBeat Invoke,_get3,_set3),
[22]
	(_s6,0,_nextSBeat Invoke,_get6,_set6),
	(_s3,1,_nextDBeat Invoke,_get3,_set3),
	(_s2,2,_nextHBeat Invoke,_get2,_set2),
	(_s1,0,_nextHBeat Invoke,_get1,_set1),
	(_s2,2,_nextSBeat Invoke,_get2,_set2),
	(_s3,1,_nextSBeat Invoke,_get3,_set3)


) !sequence

{
	1 SF.Silence !ret
	(
		?sequence,
		{
		    !note
		    
		    ?note ListHead                   !string
		    ?note ListTail ListHead          !fret
		    ?note ListTail ListTail ListHead !at
		    ?note ListTail ListTail ListTail 
		    						ListHead !get
		    ?note ListTail ListTail ListTail 
		    			ListTail	ListHead !set
		    
		    >get Invoke !buffer
		    
		    (?string,?fret)ListGet                 !frequency
			_pluck Do Done                         !data
			
[			(0,_1bar,?data)SF.Cut                  !data]
		 	
			?data SF.ClipToSafe                    !data
			[ timing ]
			(?at,-20)Diff                          !at
			(?at,(40,Maths.Random)Prod)Sum         !at
		 	(?at SF.Silence,?data)SF.Concatenate   !data
		 	[ Kill string before adding new ]
		 	(0,?at,>buffer)SF.Cut                  !buffer
		 	(
		 		((0,1),((?buffer SF.Length,50)Diff,1),(?buffer SF.Length,0))SFShape.Numeric,
		 		>buffer
		 	)SF.Multiply                           !buffer
		 	(?data,50,2)SFFilter.NHighPass         !data
		 	(?buffer,?data)SF.Add                  !data
		 	?set Invoke   
		}
	)ListInvoke
	(
		(>ret6,3)SF.Volume,
		(>ret5,2)SF.Volume,
		>ret4,
		(>ret3,-1)SF.Volume,
		(>ret2,-3)SF.Volume,
		(>ret1,2)SF.Volume
	)SF.Add SF.Normalise                              !ret
} _read

_read Do Done SF.Normalise !tune

[ Get the results of the tasks and make a wav file ]
((?tune),"c:\temp\tone.wav")Sf.WriteFile16

[ Play that wave file ]
("c:\temp\tone.wav","Primary Sound Driver" Sf.Mixer)Sf.PlayFile sf.LineWait


