{ >signal MakeTriangle } !triangle-shape
{ >signal MakeSawTooth } !saw-tooth-shape
{
    (?length,(?pitch,((Random,0.5)-,5)*)-,Random)PhasedSinWave !signal
    ?wave-shape Do Done !signal
    (((?length,500)/ WhiteNoise,2500,6)butterworthLowPass,0.001)DirectRelength Normalise !multi
    (0,?signal Length,>multi)Cut  !multi
    (
        (1,>multi pcnt+2 )DirectMix,
        >signal
    )Resample !signal
    (>signal,(?pitch,4)*,1)butterworthLowPass Normalise
} !string
{
    {
        (?pitch,4)*  !pitch 
        ( 
            { ?triangle-shape  !wave-shape ?string Do Done },
            { ?triangle-shape  !wave-shape ?string Do Done },
            { ?triangle-shape  !wave-shape ?string Do Done },
            { ?triangle-shape  !wave-shape ?string Do Done },
            { ?saw-tooth-shape !wave-shape ?string Do Done },
            { ?saw-tooth-shape !wave-shape ?string Do Done },
            { ?saw-tooth-shape !wave-shape ?string Do Done }
        )DoAll Mix Normalise
    } Do Done !sample
      
    (>sample,(?pitch,5)*,2)ButterworthLowPass !sample 
    
    ((?length WhiteNoise,500,6)ButterworthLowPass,0.01)DirectResample Normalise !multi
    
    (>multi,(?pitch,2)/,3)ButterworthHighPass Normalise !multi
    (>multi,(?pitch,2)/,2)ButterworthHighPass Normalise !multi
    (
        (0.5,?multi pcnt+5)DirectMix,
        >sample
    )Multiply Normalise  !sample 
    ?sample check
    (>sample,(?pitch,2)/,4)ButterworthHighPass Normalise !sample
    (>sample,(?pitch,2)/,4)ButterworthHighPass Normalise !sample
    (
        (
            (0,-99),
            (150,0),
            ((?sample Length,2)/,0),
            (?sample Length,-99)
        )SimpleShape,
        >sample
    )Multiply Normalise
    
} !play-strings

[ A very desnse reflector
  Which splits the reflected wave form into smaller chunkcs
  reflects them and then recombines the results. This is
  very parallel.
]
{
    {
        (?signal,1000,5)BesselLowPass        !signalL
        (?signal,3000,2)BesselLowPass        !signalN
        (?signal,1000,4)ButterworthHighPass  !signalH
        (>signalH ,5000,2)BesselLowPass      !signalH
        (?signal,((?first ,?offset)+ Prime Silence,(?signal,-13)Volume)Concatenate)Mix    !wet
        (
            1,5,
            {
                !z
                (?z,5)/ !z
                (>first,1.05)* Prime !first
                (>wet ,((0,((?first,15)-,?offset)-)Max Silence,(?signalL ,(-5,?z)-)Volume)Concatenate)Mix    !wet
                (>wet ,((0,((?first,15)+,?offset)-)Max Silence,(?signalN ,(-1, ?z)-)Volume)Concatenate)Mix    !wet
                (>wet ,((0,(?first      ,?offset)-)Max Silence,(?signalH ,(-1,?z)-)Volume)Concatenate)Mix    !wet
            }
        )Repeat
        (?signalL ,1000,1)BesselLowPass  !signalL
        (?signalN ,1000,1)BesselLowPass  !signalN
        (?signalH ,2000,1)BesselLowPass  !signalH
        (
            (0,0),
            ((?wet  Length,3)/,1),
            (?wet   Length,0)
        )NumericShape !env
        (
            6,30,
            {
                !z
                (?z,10)/ !z
                (>first,1.07)* Prime !first
                (>wet ,((0,((?first,15)-,?offset)-)Max Silence,((?signalL ,(-2,?z)-)Volume,?env)Multiply)Concatenate)Mix  !wet
                (>wet ,((0,((?first,15)+,?offset)-)Max Silence,((?signalN ,(-1,?z)-)Volume,?env)Multiply)Concatenate)Mix  !wet
                (>wet ,((0,(?first      ,?offset)-)Max Silence,((?signalH ,(-2,?z)-)Volume,?env)Multiply)Concatenate)Mix  !wet
            }
        )Repeat
        0.99 !l
        (
            30,60,
            {
                !z
                (?z,13)/ !z
                (>first,1.08)* Prime !first
                (>wet ,((0,((?first,15)-,?offset)-)Max Silence,(((?signalL ,( 2,?z)-)Volume,?env)Multiply,1000,2)BesselLowPass)Concatenate)Mix  !wet
                (>wet ,((0,((?first,15)+,?offset)-)Max Silence,(((?signalN ,( 1,?z)-)Volume,?env)Multiply, 500,2)BesselLowPass)Concatenate)Mix  !wet
                (>wet ,((0,(?first      ,?offset)-)Max Silence,(((?signalH ,(-2,?z)-)Volume,?env)Multiply, 330,2)BesselLowPass)Concatenate)Mix  !wet
            }
        )Repeat
        >wet
    } !reflector
    
    ?signal !dry
    bunch !dos
    (
        (>signal,?reflect-length)Granulate,
        {
            ^signal ^time
            ("Reverb at: ",?time)Println
            (?signal,>signal Length Silence)Concatenate !signal
            ?reflector Do !signal
            ((>signal,?time),>dos)AddEnd  !dos
        }
    )InvokeAll
    bunch !results
    (
        >dos,
        {
            ^signal ^time
            ((>signal Done,?time),>results)AddEnd  !results
        }
    )InvokeAll
    ("Monster Mix")Println
    >results MixAt !wet
    
    [ Make it waver ]
    [?waver Do !wet ]
    [ Make it very wet ]
    (
        >wet,
        >dry Invert
    )Mix Normalise !wet
        
}!stereo-plate

{
    (>pitch,((0.1,Random)*,0.95)+)* !pitch

    [?play-strings Do !signal !string]
    (?length,(?pitch,0.25)*)SinWave !string
    (
        ((0,0),((?length,2)/,1),(?length,0))NumericShape,
        ?string
    )Multiply !string
    
    ("F1 ",?f1)Println
    ("F2 ",?f2)Println
    ("F3 ",?f3)Println
    
    (>f1,((0.2,Random)*,0.9)+)* !f1
    (>f2,((0.2,Random)*,0.9)+)* !f2
    (>f3,((0.2,Random)*,0.9)+)* !f3
    ?length WhiteNoise !signal
    (?signal,?f1,3)ButterworthHighPass          !signal
    (?signal,?f3,3)ButterworthLowPass Normalise !signal
      
    (?signal,?f1,0.5,48)RBJPeaking  Normalise  !signal1
    (?signal1,?f1,0.5,48)RBJPeaking Normalise  !signal1

    [(?signal1,?f1,0.2,48)RBJPeaking Normalise  !signal1]
    
    (?signal,?f2,1.0,48)RBJPeaking  Normalise  !signal2
    (?signal2,?f2,0.5,48)RBJPeaking Normalise  !signal2

    [(?signal2,?f2,0.5,48)RBJPeaking Normalise  !signal2]
    
    (?signal,?f3,0.5,48)RBJPeaking  Normalise  !signal3
    (?signal3,?f3,0.3,48)RBJPeaking Normalise  !signal3

    [(?signal3,?f3,0.1,48)RBJPeaking Normalise  !signal3]
    
    (>signal1,>signal2 dbs-6 ,>signal3 dbs-12)Mix Normalise !signal
    
    (
        (
            (?signal Length,500)/ WhiteNoise,
            500,
            3
        )ButterworthLowPass,
        0.001
    )DirectRelength Normalise !multi
    (0,?signal Length,>multi)Cut  !multi
    (?signal ,?multi)Multiply !signal

    (
        (
            (?signal Length ,500)/ WhiteNoise,
            2500,
            6
        )butterworthLowPass,0.001
    )DirectRelength Normalise !multi
    
    (0,?signal Length,>multi)Cut  !multi
    (
        (1,>multi pcnt+2 )DirectMix,
        >signal
    )Resample Normalise !signal

    (>string pcnt+25,>signal pcnt+80)Mix Normalise !signal
}!make-sing

{
    ("Computing note at",?pitch)Println
    [(?make-sing,,,,,,,,,,,,,,,,)DoAll Mix Normalise !signal]
    (?make-sing,,)DoAll Mix Normalise !signal

    (
        ((0,0),(250,1),(((?length,0.33)*,2000)Min,0.75),((?length,0.9)*,0.33),(?length,0))NumericShape,
        >signal
    )Multiply Normalise !signal
    ("Computed node at",?pitch)Println
    >signal
}!mystic

{
    (>length,2)*                          !length
    (?length,(?pitch,2)-)SinWave          !signal1 
    (?length,(?pitch,2)+)SinWave          !signal2 
    (?length,(?pitch,1.2)*)SinWave dbs+48 !fm1
    (?length,(?pitch,1.3)*)SinWave dbs+12 !fm2
    
    (
        (
            ?signal1,
            >fm1
        )FrequencyModulate,
        (
            >signal2 dbs-24,
            >fm2
        )FrequencyModulate,
    )Mix Normalise !signal
    
    (
        >signal,
        (
            (100 WhiteNoise,?pitch,2)ButterworthLowPass,
            (
                (0,0),
                (20,1),
                (100,0)
            )NumericShape
        )Multiply
    )Mix Normalise !signal
    
    (
        (0,-99),
        (50,0),
        (?length,-99)
    )SimpleShape !env
    (
        >signal,
        >env
    )Multiply !signal
    
    (>signal,(?pitch,2)*,2)ButterworthHighPass         !signal
    (>signal,(?pitch,1)*,?dullness)ButterworthLowPass  Normalise !signal
    (>signal,?dbs)Volume 
}!play-bell


{
    >fr1 !f1
    >fr2 !f2
    >fr3 !f3
    
    ?pitchr !pitch
    ?mystic Do !right 
    
    >fl1 !f1
    >fl2 !f2
    >fl3 !f3
    
    ?pitchl !pitch
    ?mystic Do !left

    ?pitchl            !pitch
    Random             !dullness
    ((random,-6)*,3)-  !dbs
    ?play-bell Do      !bl
 
    ?pitchr            !pitch
    Random             !dullness
    ((random,-6)*,3)-  !dbs
    ?play-bell Do      !br

    ((>left,0),(>bl,1000))MixAt  !left
    ((>right,0),(>br,1000))MixAt !right
    
    [ Tiny sounds ]
    {
        (
            1,(?signal Length,800)/,
            {
                !at
                (800,(800,Random)*)+ !tiny-length
                (?tiny-pitch,((11,Random)*,4)+ Integer)* !tiny-pitch-use
                (15000,>tiny-pitch-use)Min !tiny-pitch-use
                ?tiny-pitch-use !pitch
                0               !dullness
                (random,-12)*   !dbs
                ?play-bell   Do !ting
                ?tiny-length    !length
                (
                    (>signal,0),
                    (>ting dbs-12,((Random,400)*,(>at,800)*)+)
                )MixAt !signal
            }
        )Repeat    
        >signal
    }!tiny-sound
    
    >pitchl !tiny-pitch
    >left   !signal
    ?tiny-sound Do !left

    >pitchr !tiny-pitch
    >right  !signal
    ?tiny-sound Do !right
    (>left,>right)
}!make-note

(400000,(10,(2,0.5)**)* )SinWave !sqrt2-samples 
(400000,(10,(3,0.5)**)* )SinWave !sqrt3-samples 
(400000,(10,(5,0.5)**)* )SinWave !sqrt5-samples
(400000,(10,(7,0.5)**)* )SinWave !sqrt7-samples
(400000,(10,(11,0.3)**)*)SinWave !sqrt11-samples
Bunch !notes
(
  1,200,
  {
    !x
    {
        (500,>x)* !x
        (?sqrt2-samples,?x)ValueAt !x2
        (?sqrt3-samples,?x)ValueAt !x3
        (?sqrt5-samples,?x)ValueAt !x5
        ((((?x2,1)+,400)*,0.5)** Integer,26)* !pitchl
        ((((?x3,1)+,400)*,0.5)** Integer,26)* !pitchr
        ("Pitchl ",?pitchl)StrCat Println
        ("Pitchr ",?pitchr)StrCat Println
        (((?x5,1)+,5000)*,10000)+ Integer    !length
        (450,(200,Random)*)+  !fl1
        (450,(200,Random)*)+  !fr1
        (1600,(400,Random)*)+ !fl2
        (1600,(400,Random)*)+ !fr2
        (2300,(500,Random)*)+ !fl3
        (2300,(500,Random)*)+ !fr3
        ?make-note do done
     }Do !do
     (>do,>notes)AddEnd !notes
  }
)Repeat
0 !placel
0 !placer
Bunch !left
Bunch !right
(
    >notes,
    {
        ^leftNote ^rightNote
        (((?leftNote,((Random,0.5)*,0.5)+)NumericVolume ,?placel),>left)AddEnd  !left
        (((?rightNote,((Random,0.5)*,0.5)+)NumericVolume,?placer),>right)AddEnd !right
        (>placel,(>leftNote  length,4)/)+ !placel
        (>placer,(>rightNote length,4)/)+ !placer
    }
)InvokeAll

{>right MixAt}Do !right
{>left  MixAt}Do !left
(0,(?left  length,1.5)/,>left )Cut !left
(0,(?right length,1.5)/,>right)Cut !right

[
    (?left Normalise,?right Normalise)StereoMonitor
]

(
    (
        ?left Length WhiteNoise,
        500,
        6
    )ButterworthLowPass,
    0.0005
)DirectResample Normalise !multiL

(
    (
        ?right Length WhiteNoise,
        500,
        6
    )ButterworthLowPass,
    0.001
)DirectResample Normalise !multiR
(
    (?left ,?multiL)Multiply,
    (?right,?multiR)Multiply
)Mix !middle

(?middle dbs-3,>left )Mix Normalise !left
(?middle dbs-3,>right)Mix Normalise !right

[ Simple attempt at true stereo reverb effect ]

>left  Normalise !left
>right Normalise !right
1000 !reflect-length
13   !first
0    !offset    
>left !signal
?stereo-plate Do !left
(?left Normalise,?signal normalise Invert)Mix !wetl

13 !first
10 !offset
>right !signal
?stereo-plate Do !right
(?right Normalise,?signal normalise Invert)Mix !wetr

((>left ,0),(?wetr pcnt-25 ,10))MixAt !left
((>right,0),(?wetl pcnt-25 ,10))MixAt !right
        
(>right,12,2)BesselHighPass          !right
(>left ,12,2)BesselHighPass          !left

>left  Normalise !left
>right Normalise !right
2500 !reflect-length
17   !first
10   !offset    
>left !signal
?stereo-plate Do !left

17 !first
 0 !offset
>right !signal
?stereo-plate Do !right

(>right,12,2)BesselHighPass          !right
(>left ,12,2)BesselHighPass          !left

(>left Normalise,>right Normalise)!out

"About to write" println
(>out,"temp/done.wav")WriteFile32
