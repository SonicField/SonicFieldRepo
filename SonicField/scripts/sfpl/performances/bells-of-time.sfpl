{
    (?sample,1000,5)DirectLowPass  !sampleL
    (?sample,3000,2)DirectLowPass  !sampleN
    (?sample,1000,4)DirectHighPass !sampleH
    (>sampleH,5000,2)DirectLowPass !sampleH
    (?sample,((?first ,?offset)+ Prime Silence,(?sample,-13)Volume)Concatenate)Mix    !wet
    (
        1,2,
        {
            !z
            (>first,1.2)* Prime !first
            (>wet,(((?first,30)-,?offset)- Silence,(?sampleL,(-10,?z)-)Volume)Concatenate)Mix   !wet
            (>wet,(((?first,30)+,?offset)- Silence,(?sampleN,(-6, ?z)-)Volume)Concatenate)Mix   !wet
            (>wet,((?first      ,?offset)- Silence,(?sampleH,(-10,?z)-)Volume)Concatenate)Mix   !wet
        }
    )Repeat
    (?sampleL,1000,1)DirectLowPass  !sampleL
    (?sampleN,1000,1)DirectLowPass  !sampleN
    (?sampleH,2000,1)DirectLowPass  !sampleH
    (
        (0,0),
        ((?wet Length,3)/,1),
        (?wet Length,0)
    )NumericShape !env
    (
        3,20,
        {
            !z 
            (?z,2)/ !z
            (>first,1.1)* Prime !first
            (>wet,(((?first,30)-,?offset)- Silence,((?sampleL,(-7,?z)-)Volume,?env)Multiply)Concatenate)Mix    !wet
            (>wet,(((?first,30)+,?offset)- Silence,((?sampleN,(-4,?z)-)Volume,?env)Multiply)Concatenate)Mix    !wet
            (>wet,((?first      ,?offset)- Silence,((?sampleH,(-7,?z)-)Volume,?env)Multiply)Concatenate)Mix    !wet
        }
    )Repeat
    (
        20,80,
        {
            !z 
            (?z,3)/ !z
            (>first,1.05)* Prime !first
            (>wet,(((?first,30)-,?offset)- Silence,(((?sampleL,(-7,?z)-)Volume,?env)Multiply,500,2)DirectLowPass)Concatenate)Mix    !wet
            (>wet,(((?first,30)+,?offset)- Silence,(((?sampleN,(-4,?z)-)Volume,?env)Multiply,500,2)DirectLowPass)Concatenate)Mix    !wet
            (>wet,((?first      ,?offset)- Silence,(((?sampleH,(-7,?z)-)Volume,?env)Multiply,500,2)DirectLowPass)Concatenate)Mix    !wet
        }
    )Repeat
    >wet
} !reflector

{
    (>length,2)* !length
    (?length,(?pitch,2)-)SinWave !signal1 
    (?length,(?pitch,2)+)SinWave !signal2 
    (?length,(?pitch,1.2)*)SinWave dbs+48 !fm1
    (?length,(?pitch,1.3)*)SinWave dbs+12 !fm2
    
    (
        (
        	?signal1,
        	>fm1
        )FrequencyModulate,
        (
            >signal2 dbs-24,
            >fm2
        )FrequencyModulate,
    )Mix Normalise !signal
    
    (
        >signal,
        (
            (100 WhiteNoise,?pitch,2)DirectLowPass,
            (
                (0,0),
                (20,1),
                (100,0)
            )NumericShape
        )Multiply
    )Mix Normalise !signal
    
    (
        (0,-99),
        (50,0),
        (?length,-99)
    )SimpleShape !env
    (
        >signal,
        >env
    )Multiply !signal
    
    (>signal,(?pitch,2)*,2)DirectHighPass !signal
    (>signal,(?pitch,1)*,?dullness)DirectlowPass  !signal
}!play-bell

5000   !length
   2   !dullness [2-6]

(100000,(10,(2,0.5)**)* )SinWave !sqrt2-samples 
(100000,(10,(3,0.5)**)* )SinWave !sqrt3-samples 
(100000,(10,(5,0.5)**)* )SinWave !sqrt5-samples
(100000,(10,(7,0.5)**)* )SinWave !sqrt7-samples
(100000,(10,(11,0.3)**)*)SinWave !sqrt11-samples
Bunch !bells
(
  1,1000,
  {
    !x
    {
        (100,>x)* !x
        ("2: ",(?sqrt2-samples,?x)ValueAt !x2) [StrCat Println]
        ("3: ",(?sqrt3-samples,?x)ValueAt !x3) [StrCat Println]
        ((((?x2,1)+,100)*,0.5)** Integer,26)* !pitch
        (((?x3,1)+,2)*,1)+ Integer      !dullness
        ("Pitch    ",?pitch)StrCat Println
        ("Dullness ",?dullness)StrCat Println
        ?play-bell do done Normalise
     }Do !do
     (>do,>bells)AddEnd !bells
  }
)Repeat

>bells DoneAll !bells

500    !room-size
1000   !pos
1 Silence !left !right
1 !z
(
    >bells,
    {
        !signal
        ?z !x
        (100,>x)* !x
        (?sqrt2-samples,?x)ValueAt !x2
        (?sqrt3-samples,?x)ValueAt !x3
        (?sqrt5-samples,?x)ValueAt !x5
        (?sqrt7-samples,?x)ValueAt !x7
        (?sqrt11-samples,?x)ValueAt !x11
        (((?x2,1)+,4)* Integer,54)* !pitch
        (((?x5,1)+,2500)*,5000)+ !length
        Random     !drive-left
        Random     !drive-right

        {
            (
                ((?signal,?drive-left)NumericVolume,(?pos,((?x7,1)+,25)*)+),
                (>left,0)
            )MixAt
        }Do !left
        {
            (
                ((?signal,(1,?drive-right)-)NumericVolume,(?pos,((?x11,1)+,25)*)+),
                (>right,0)
            )MixAt
        } Do !right
        >signal
        >right Done !right
        >left  Done !left
        
        (2500,(?z,2.5)*)- !y
        ("Y:   ",?y)StrCat Println
        ("Z:   ",?z)StrCat Println
        (((?x2,1)+,?y)*,>pos)+ !pos
        ("Pos: ",?pos)StrCat PrintLn
        (?z,1)+ !z
    }
)InvokeAll

(>left,12,1 )DirectHighPass Normalise !left
(>right,12,1)DirectHighPass Normalise !right

80 !first
0   !offset
>left !sample
?reflector Do !left
>right !sample
?reflector Do !right

(>left Done  Normalise !left,>right Done  Normalise !right) [StereoMonitor]
((2000 Silence,>left)Concatenate,(2000 Silence,>right)Concatenate)!bus
(?bus,"temp/generated-random.wav")WriteFile32

