[60000 SetSampleRate]
"temp/input.wav" ReadFile ^left ^right

{
    ("Granulate")Println
    Bunch !out
    (
        (>signal,2500,25)Granulate,
        {
            ^grain ^time
            ?grain check
            (?time,(Random,60)*)+       !time
            ((Random,0.75)*,0.25)+      !vol
            (>grain,>vol)NumericVolume  !grain length !len
            (
                (0,(2000,(15000,Random)*)+),
                (?len,(2000,(15000,Random)*)+)
            )NumericShape !cuttoff-env

            (
                (0,(1.0,Random)*),
                (?len,(1.0,Random)*)
            )NumericShape !resonance-env
            [(?grain,?cuttoff-env,?resonance-env)ShapedLadderLowPass !grainb
            ?grain MaxValue !max
            (>grainb,>max)NumericVolume !grainb
            (((>grain,>grainb)Mix,>time),>out)AddEnd !out]
            ((>grain,>time),>out)AddEnd !out
        }
    )InvokeAll
    >out MixAt Normalise
}!haas

{
    ?signal Normalise !n
    
    [ Compress ]
    ?signal Normalise !n
    (
        {(?n         ,150,150)Follow},
        {(>n Reverse ,150,150)Follow Reverse}
    )DoAll Mix !shape
    >n
    (?shape,(1,>shape MaxValue)/)NumericVolume !shape
    [ Avoid over compression - set to -20 db ]
    (0.1,>shape)DirectMix WaveLimit           !shape
    CheckZeros
    (
        (
            ?signal,
            >shape 
        )Divide pcnt+25,
        >signal
    )Mix !signal check
         
}!envelope-compress

{
    ("Filtering: ",?lower,"<",?upper)Println
    (>signal ,?lower, 2)BesselHighPass !signal
    (>signal ,?upper, 2)BesselLowPass  !signal
    ("Compressing")Println
    ?envelope-compress Invoke
    ("Filtering")Println
    (>signal ,?lower, 2)BesselHighPass !signal
    (>signal ,?upper, 2)BesselLowPass  !signal
    >signal !signal
    ?haas Do !signal Done !signal
}!compress-widen

{
    >signal Normalise !signal
    (
        (
            -0.03,0.2,0,-1,0.2,2,
            ?signal
        )WaveShaper pcnt+75,
        >signal pcnt+25
    )Mix Normalise !signal
    
    Bunch !sigs
    (
      1,14,
      {
        !band
        (?band,2)**      !bandl 
        ((>band,1)+,2)** !bandh 
        ((?bandl,100)*,75)-   !lower
        ((?bandh,100)*,75)-   !upper
        ?compress-widen Do !job
        (>job,>sigs)AddEnd !sigs
      }
    )Repeat

    [ Final over all compress ]
    >sigs Mix Normalise dbs+3 wavelimit !signal
    ?envelope-compress Invoke         !signal
    (>signal,65,1.5,12)RBJPeaking     !signal
    (>signal,12,1)ButterworthHighPass !signal
}!do-it 
{
    Bunch !grains
    (
        ?blocks,
        {
            ^signal ^time
            ?do-it Do Done ToGrain !grain
            ((>grain,>time),>grains)AddEnd !grains
        }
    )InvokeAll
    >grains MixAt Normalise
}!do-blocks

(>left,30000)Blockulate  !blocks
?do-blocks Do !left
>blocks
(>right,30000)Blockulate !blocks
?do-blocks Do !right

((>left Done,>right Done),"temp/done.wav")WriteFile32
