{
	{
		[ Generate the input pulse ]
		(?frequency,3.5)Prod  !f1
		(?f1,3.0)Prod         !f2
		(?f1,5.0)Prod         !f4
		
		(1000,?f1)Quot        !t

		(?t,?f1) SF.SinWave SFAMP.MakeTriangle SF.Normalise               !pulse1
		((?t,?f2)SF.SinWave SFAMP.MakeTriangle SF.Normalise,-6)SF.Volume  !pulse2
		((?t,?f4)SF.SinWave SFAMP.MakeTriangle SF.Normalise,-12)SF.Volume !pulse4
		(?pulse1,?pulse2,?pulse4)SF.Add SF.Normalise                      !pulse
		(?pulse,((0,1),(?t,0))SFShape.Numeric)SF.Multiply                 !pulse

	} Do Done !pulse

	(1000,?frequency)Quot                                                 !period
	("Pluck pulse length: ",?pulse SF.Length)StrCat Println
	(?pulse ,(?period,?pulse SF.Length)Diff SF.WhiteNoise) SF.Concatenate !pulse
	?pulse SF.Length                                                      !len

	("Pulse length after resonance will be: ",?len, "ms")StrCat PrintLn
	("Requested Frequency: ",?frequency, " computed is ",(1000,?len)Quot ,"hz")StrCat PrintLn

	List !output

	[ Damped Resonator ] 
	?pulse !input
	(
	   1,2000,
		{
			(?input !input,?output)ListAddEnd !output
			(?input !input,(?input SF.Reverse SF.Invert,(?frequency !frequency,7)Prod,2)SFFilter.NLowPass)SF.Add !input
			(?input,-3.010)Sf.Volume SF.RemoveDC !input
		}    
	)Repeat
	?output SF.Concatenate !left
[
	((200,?frequency !frequency)Quot println,6)SFShape.Sinc SF.Normalise !filterShape

	(?left,?filterShape !filterShape)SF.Convolve  !left
]

	[ Chomp off unwanted hf noise]
	(?left SF.Normalise,(500,(?frequency,5)Prod)Maths.Max,6)SFFilter.NLowPass !left 
	(?left SF.Normalise,?frequency,3)SFFilter.NHighPass !left 
	
	(?left !left,((0,1),(?left !left SF.Length,0))SFShape.Numeric)SF.Multiply !left

	("c:\temp\tone",?frequency Maths.Truncate,".wav")StrCat !fileName
	
 	[ Get the results of the tasks and make a wav file ]
	((?left SF.Normalise !left),?fileName !fileName)Sf.WriteFile16

	[ Play that wave file ]
	[(?fileName,"Primary Sound Driver" Sf.Mixer)Sf.PlayFile sf.LineWait]
} _pluck

List !toDo

"E1" SF.Note  !frequency
(
	1,(12,5)Prod,
	{
		{ 
			_pluck Do Done
		} Do  !aDo
		(?aDo,?toDo)ListAddEnd !toDo
		(?frequency,SF.Semitone)Prod !frequency
	} 
)Repeat

(?toDo,{ Done})ListInvoke
