def solar_piano(pitch,attack,decay,sustain,release,hit_strength):
    hit=sf.MakeSquare(sf.SineWave(attack*2,pitch))
    hit=sf.ButterworthLowPass(hit,pitch*2,4)
    hitEnv=sf.NumericShape(
        (0,1),
        (45,0.5),
        (75,0)
    )
    hit=sf.Finalise(sf.Multiply(hit,hitEnv))
    hit=sf.Volumne(hit,hit_strength)
    length=attack+decay+sustain+release 
       
    note=sf.Mix(
       sf.DBs3(sf.SineWave(length,pitch)),
       sf.DBs_12(sf.SineWave(length,pitch*2)), 
       sf.DBs_18(sf.SinwWave(length,pitch*3))
    )
    
    noteEnv=sf.NumericShape(
        (0,0),
        (attack,1),
        (attack+decay,0.5),
        (attack+decay+sustain+,0.1),
        (length,0)
    )
    
    note = sf.Multiply(
        note,
        +noteEnv
    )
     
    note=sf.Finalise(
        sf.WaveShaper(
            1,
            0,
            1,
            1,
            4,
            10,
            ?note
        )
    )
    note=sf.Finalise(
        sf.WaveShaper(
            0,
            0,
            1,
            1,
            4,
            10,
            note
        )
    )
    
    note=sf.ButterworthHighPass(note,pitch,1)
    note=sf.ButterworthLowPass(note,1500,2)
    
    twang=sf.Multiply(
        sf.Slide((0,5),(attack+decay+sustain,1)),
        noteEnv
    )Multiply !twang
    twang=sf.Concatenate(twang,sf.Silence(release))
    
    twang=sf.DirectMix( 1,sf.Pcnt20(twang))
    note=sf.Multiply(
        twang,
        note
    )
    
    note=sf.mix(
        sf.DBs6(hit),
        note
    )
    
    note1=sf.Resample(+note,sf.NumericShape((0,1.001),(sf.Length(+note),0.999))
    +note
    note2=sf.Resample(note,sf.NumericShape((0,0.999),(sf.Length(note),1.001))
    note=sf.Finalise(sf.Mix(note1,note2))

    base=64
    soundingBoard=sf.MultipleResonantFilter(
        af.Finalise(sf.ButterworthLowPass(+note,110,2)ButterworthLowPass),
        (
            (-7,sf.Period(base)),
            (-7,sf.Period(base*1.25)),
            (-7,sf.Period(base*1.50)),
            (-7,sf.Period?base*1.75))
        ),
        -20
    )
    
    (>sounding-board,110,2)ButterworthLowPass Normalise !sounding-board 
    ((0,0),(125,0),(500,1),((?note length,250)-,1),(?note length,0))NumericShape !damper
    (>sounding-board,25,4)ButterworthHighPass !sounding-board
    (
        >sounding-board,
        ?damper
    )Multiply Normalise !sounding-board 
    (>sounding-board,25,4)ButterworthHighPass !sounding-board
    (
        >sounding-board,
        ?damper
    )Multiply Normalise !sounding-board 
    (>sounding-board,?pitch,1)ButterworthHighPass !sounding-board
    (250,?sounding-board length,>sounding-board)Cut !sounding-board
   
    (
        >sounding-board,
        >note
    )Mix Normalise !note
    
    (
        (
            250 Silence,
            (?damper,?note)Multiply Saturate Normalise,
        )Concatenate,
        (
            (-3,(?pitch,0.05)* Period),
            (-6,(?pitch,0.2)* Period),
            (-8,(?pitch,0.25)* Period),
            (-8,(?pitch,0.333)* Period),
            (-9,(?pitch,0.5)* Period),
            (-6,(?pitch,1.5)* Period),
            (-6,(?pitch,2.0)* Period) 
        ),
        -80
    ) MultipleResonantFilter Normalise        !res
    (0,?length,>res)Cut               !res
    (
        0,
        0,
        1,
        1,
        4,
        10,
        >res
    ) WaveShaper Normalise !res    
    (
        >note,
        >res Normalise pcnt+15
    )Mix !note
    (?note,(?pitch,2)*,1)ButterworthLowPass Normalise !note    
    
    (>note,500 Silence)Concatenate !note
    
    [ Mix in the characteristic white noise ]
    (
        (
            1,
            (
                (
                    ?note length WhiteNoise,
                    ?pitch,
                    4
                )ButterworthHighPass
                ,(?pitch,1.25)*
                ,4
            )ButterworthLowPass Normalise pcnt+5
        )DirectMix,
        >note
    )Multiply !note
    (>note,15,2)ButterworthHighPass     !note

    (
        (0,0),
        (500,0),
        (1000,1),
        (?note length,1)
    )NumericShape !note-env
    
    (
        >note-env,
        ?note
    )Multiply !sample

    (>sample,25,4)ButterworthHighPass !sample
    ((?sample Length WhiteNoise,500,6)ButterworthLowPass,0.01)DirectResample Normalise !multi
    (>sample,(1,>multi)DirectMix)Multiply !sample

    >sample !signal
    
    [
    (
        (
            ((2000 WhiteNoise,2)Power,2000,1)ButterworthLowPass Normalise,
            ((0,0),(80,0),(90,1),(2000,0))NumericShape
        )Multiply,
        (
            ((5000 WhiteNoise,3)Power,1000,2)ButterworthLowPass Normalise,
            ((0,0),(125,0),(135,1),(5000,0))NumericShape
        )Multiply
    )Mix Normalise !convol
    ]
    
    (
        ?reverb Do pcnt+50,
        !sample
    )Mix

    ((?sample Length WhiteNoise,500,6)ButterworthLowPass,0.01)DirectResample Normalise !multi
    (>sample,(1,>multi dbs-6)DirectMix)Multiply !sample
    (
        0,
        0,
        1,
        1,
        4,
        10,
        >sample
    ) WaveShaper Normalise !sample
    (
        (((0,0.125),(4000,0.25),(?sample Length,1))NumericShape,>sample)Multiply,
        >note
    )Mix Normalise !note

    
    (
        ((?note,1000,4)ButterworthHighPass,0.87)Power dbs-6,
        >note
    )Mix Normalise !note

   ( >note,?volume)NumericVolume 
        
}!solar-piano

def play_solar(pitch,velocity,length,hit=strength,soft_attack): 
    velocity=float(velocity)
    volume=velocity**1.5
    velocity=(velocity+1)**2-1 
    if velocity<0.5:
        attack=120
        decay=400
    else:
        attack=50
        decay=400
        
    sustain=decay+length/4.5

    release=length        
    hit_strength=velocity

    # bass boost
    if pitch<220:
        hit_strength += 0.5
        volumne      += 0.33
    
    print "C",?count,
        "P",?pitch,
        "V",?volume,
        "H",?hit-strength,
        "A",?attack,
        "D",?decay,
        "S",?sustain,
        "R",?release

    signal=solar_piano(sdfsdf)
    if soft_attack:
        n=sf.NumericShpae((0,1),(125,0)
        signal=sf.Mix(
            sf.Multily(
                sf.BesselLowPass(+signal,pitch*7,6),
                sf.NumericShpae((0,1),(125,0)
            ),
            sf.Multily(
                signal,
                sf.NumericShpae((0,0),(125,1)
            )
        )
        sf.Mix(+signal,sf.Pcnt25(sf.Finalise(sf.Saturate(sf.DirectMix(0.25,signal))))
    return signal