import math
import random
import sys

def resonate(left,right,del1,del2):
    left  = sf.Concatenate(left ,sf.Silence(120000))
    right = sf.Concatenate(right,sf.Silence(120000))
    
    leftA  = sf.Mix(
        sf.Pcnt90(sf.Finalise(sf.ResonantFilter(+left  ,0.9,0.5,del1[0]))),
        sf.Pcnt10(sf.Finalise(sf.ResonantFilter(+right ,0.9,0.5,del1[1])))
    )
    
    rightA = sf.Mix(
        sf.Pcnt90(sf.Finalise(sf.ResonantFilter(right ,0.9,0.5,del2[0]))),
        sf.Pcnt10(sf.Finalise(sf.ResonantFilter(left  ,0.9,0.5,del2[1])))
    )
    return leftA,rightA

def doLow(sig):
    def doLowInner():
        +sig
        out=[]
        q=0
        for grain in sf.Granulate(sig,1024,10):
            if q==1:
                q=0
                (signal_i,at)=grain
                signal_i=sf.Realise(signal_i)
                signal_i=sf.DirectRelength(signal_i,0.25)
                out.append((signal_i,at))
            else:
               (signal_i,at)=grain
               -signal_i
               q=1
        newSig=sf.MixAt(out)
        newSig=sf.Saturate(sf.FixSize(sf.NumericVolume(newSig,2)))
        print "Shift part 1 Done"
        return sf.Realise(sf.Finalise(sf.Mix(
            sig,
            sf.Pcnt25(newSig)
        )))
    return sf_do(doLowInner)

left  = sf.ReadSignal("temp/dry-l.sig")
right = sf.ReadSignal("temp/dry-r.sig")

left,right  = resonate((left,right),(1000,3000),(1100,2900))   

left  = doLow(left)    
right = doLow(right)

sf.WriteSignal(+left, "temp/sdry-l.sig")
sf.WriteSignal(+right,"temp/sdry-r.sig")
sf.WriteFile32((left,right),"temp/space.wav")