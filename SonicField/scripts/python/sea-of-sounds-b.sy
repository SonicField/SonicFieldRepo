import random
import math

# Single threaded for debug
#def sf_do(toDo):
#   return toDo()
    
def reverbInner(signal,convol,grainLength):
    mag=sf.Magnitude(+signal)
    if mag>0:
        signal_=sf.Concatenate(signal,sf.Silence(grainLength))
        signal_=sf.FrequencyDomain(signal_)
        signal_=sf.CrossMultiply(convol,signal_)
        signal_=sf.TimeDomain(signal_)
        newMag=sf.Magnitude(+signal_)
        signal_=sf.NumericVolume(signal_,mag/newMag)        
        # tail out clicks due to amplitude at end of signal 
        return signal_
    else:
        -convol
        return signal

def reverberate(signal,convol):
    grainLength = sf.Length(+convol)
    convol_=sf.FrequencyDomain(sf.Concatenate(convol,sf.Silence(grainLength)))
    signal_=sf.Concatenate(signal,sf.Silence(grainLength))
    return sf.Swap(reverbInner(signal_,convol_,grainLength))

def doFormant(sig,f1,f2,f3):
    def doFormantInner(a,b,c,d):
        def doFII():
            return sf.RBJPeaking(a,b,c,d)
        return sf_do(doFII)
    sig1=doFormantInner(+sig,f1,1,40)
    sig2=doFormantInner(+sig,f2,2,20)
    sig3=doFormantInner( sig,f3,1,40)
    x=sf.Mix(sig1,sig2,sig3)
    x=sf.Normalise(x)
    return x

#beat
def sayBeat(sig):
    return doFormant(sig,300,2800,3300)

#bit
def sayBit(sig):
    return doFormant(sig,430,2500,3100)

#bet
def sayBet(sig):
    return doFormant(sig,600,2350,3000)

#bat
def sayBat(sig):
    return doFormant(sig,860,2050,2850)

#part
def sayPart(sig):
    return doFormant(sig,850,1200,2800)

#pot 
def sayPot(sig):
    return doFormant(sig,590,900,2700)

#boat
def sayBoat(sig):
    return doFormant(sig,470,1150,2700)

#book
def sayBook(sig):
    return doFormant(sig,370,950,2650)

#but
def sayBut(sig):
    return doFormant(sig,760,1400,2800)

#pert
def sayPert(sig):
    return doFormant(sig,500,1650,1950)

# oddness
def sayStrange(sig):
    return doFormant(sig,550,1800,2050)

def doFormantRand(sig):
    formants=[
    sayBeat,
    sayBit,
    sayBet,
    sayBat,
    sayPart,
    sayPot,
    sayBoat,
    sayBook,
    sayBut,
    sayPert,
    sayStrange
    ]
    r=int(math.floor(random.random()*10.999999));
    f=formants[r];
    return sf.Clean(f(sig))

def voiceVerb(signal):
    def voiceVerbInner():
        print "Voice Reverb"
        l=sf.Length(+signal)
        conv=sf.Power(sf.WhiteNoise(l),3)
        cshp=sf.SimpleShape((0,0),(l-25,-45),(l,-99))
        conv=sf.Multiply(conv,cshp)
        conv=sf.FixSize(conv)
        conv=doFormantRand(conv)
        return sf.Swap(sf.Clean(reverberate(signal,conv)))
    return sf_do(voiceVerbInner)

def granularSay(signal,length):

    def granularReverbInner():
        out=[]
        print "GR Inner"
        for grain in sf.Granulate(signal,length,length/4):
            (signal_i,at)=grain
            signal_i=voiceVerb(signal_i)
            out.append((signal_i,at))
        return sf.Swap(sf.MixAt(out))
    return sf_do(granularReverbInner)

(left,right)=sf.ReadFile("temp/sea2-1.wav")
#left =sf.Cut(0,120000,left)
#right=sf.Cut(0,120000,right)
left =sf.Swap(left)
right=sf.Swap(right)
wleft =granularSay(+left,8192)
wright=granularSay(+right,8192)

left=sf.Normalise(sf.MixAt(
    (sf.Pcnt50(sf.Swap(sf.Normalise(wleft))),0),
    (sf.Pcnt50(sf.Swap(sf.Normalise( left))),00)
))

right=sf.Normalise(sf.MixAt(
    (sf.Pcnt50(sf.Swap(sf.Normalise(wright))),0),
    (sf.Pcnt50(sf.Swap(sf.Normalise( right))),0)
))


sf.WriteFile32((left,right),"temp/sea3.wav")