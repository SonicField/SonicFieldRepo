[ A very desnse reflector
  Which splits the reflected wave form into smaller chunkcs
  reflects them and then recombines the results. This is
  very parallel.
]
{
    {
        (?signal,1000,5)BesselLowPass   !signalL
        (?signal,3000,2)BesselLowPass   !signalN
        (?signal,1000,4)ButterworthHighPass  !signalH
        (>signalH ,5000,2)BesselLowPass  !signalH
        (?signal,((?first ,?offset)+ Prime Silence,(?signal,-13)Volume)Concatenate)Mix    !wet
        (
            1,2,
            {
                !z
                "." Print
                (>first,1.05)* Prime !first
                (>wet ,(((?first,30)-,?offset)- Silence,(?signalL ,(-10,?z)-)Volume)Concatenate)Mix    !wet
                (>wet ,(((?first,30)+,?offset)- Silence,(?signalN ,(-6, ?z)-)Volume)Concatenate)Mix    !wet
                (>wet ,((?first      ,?offset)- Silence,(?signalH ,(-10,?z)-)Volume)Concatenate)Mix    !wet
            }
        )Repeat
        (?signalL ,1000,1)BesselLowPass  !signalL
        (?signalN ,1000,1)BesselLowPass  !signalN
        (?signalH ,2000,1)BesselLowPass  !signalH
        (
            (0,0),
            ((?wet  Length,3)/,1),
            (?wet   Length,0)
        )NumericShape !env
        (
            3,20,
            {
                !z
                (?z,4)/ !z
                (>first,1.1)* Prime !first
                (>wet ,(((?first,30)-,?offset)- Silence,((?signalL ,(-7,?z)-)Volume,?env)Multiply)Concatenate)Mix  !wet
                (>wet ,(((?first,30)+,?offset)- Silence,((?signalN ,(-4,?z)-)Volume,?env)Multiply)Concatenate)Mix  !wet
                (>wet ,((?first      ,?offset)- Silence,((?signalH ,(-7,?z)-)Volume,?env)Multiply)Concatenate)Mix  !wet
            }
        )Repeat
        0.99 !l
        (
            20,40,
            {
                !z
                "." Print
                (?z,6)/ !z
                (>first,1.08)* Prime !first
                (>wet ,(((?first,30)-,?offset)- Silence,(((?signalL ,(-7,?z)-)Volume,?env)Multiply,1000,2)BesselLowPass)Concatenate)Mix  !wet
                (>wet ,(((?first,30)+,?offset)- Silence,(((?signalN ,(-4,?z)-)Volume,?env)Multiply, 500,2)BesselLowPass)Concatenate)Mix  !wet
                (>wet ,((?first      ,?offset)- Silence,(((?signalH ,(-7,?z)-)Volume,?env)Multiply, 330,2)BesselLowPass)Concatenate)Mix  !wet
            }
        )Repeat
        >wet
    } !reflector
    
    ?signal !dry
    bunch !dos
    (
        (>signal,?reflect-length)Granulate,
        {
            ^signal ^time
            "" Println
            ("Reverb at: ",?time)Println
            (?signal,>signal Length Silence)Concatenate !signal
            ?reflector Do !signal
            ((>signal,?time),>dos)AddEnd  !dos
        }
    )InvokeAll
    bunch !results
    (
        >dos,
        {
            ^signal ^time
            ((>signal Done,?time),>results)AddEnd  !results
        }
    )InvokeAll

    >results MixAt !wet
    
    [ Make it waver ]
    [?waver Do !wet ]
    [ Make it very wet ]
    (
        >wet,
        >dry Invert
    )Mix Normalise !wet
        
}!do-reflector

{
    ("Scanning channel ",?pitch)Println
    (?pitch,2)/  !p-use
    (?length,2)/ !l-use
    (?pitch,8)*  !p-use-l
    (?length,8)* !l-use-l
    {
        (?s-in,  ?p-use,0.1,18)RBJPeaking dbs-18 WaveLimit !signal
        (?signal,?p-use,0.1,18)RBJPeaking dbs-18 WaveLimit !signal
        (?signal,?p-use,0.1,18)RBJPeaking dbs-18 WaveLimit !signal
        (?signal,?p-use,0.1,18)RBJPeaking dbs-18 WaveLimit !chan-sig
        (?p-use period,10)/                 !p
        (
            {(?chan-sig,?p,?p)Follow pcnt+50}Do,
            {(>chan-sig,?p,?p)Follow pcnt+50}Do
        )Mix WaveLimit              !chan-sig
        [ Now enhance it ]
        (>chan-sig,?enhance-channels)Power !chan-sig
        [ Now gate it]
        (
            (
                (?chan-sig,?gate)Gate,
                12,
                2
            )ButterworthLowPass,
            >chan-sig
        )Multiply
    }Do !chan-sig
    
    (?chan-sig,(1,16)/)DirectRelength !chan-sig
    (>p-use,2)/ !p-use
    {    
        ("Regenerating channel ",?pitch)Println
        (?l-use-l,?p-use)SinWave !wave
        (
            (?p-use,200)Lt,
            {
                (
                    (?l-use-l,(?p-use,2)/)SinWave Normalise pcnt+25,
                    (?l-use-l,(?p-use,4)/)SinWave Normalise pcnt+10,
                    >wave
                )Mix !wave
            },
            {
                [ Should add brightness to the louder bits ]
                ?chan-sig MaxValue !max
                (
                    (?wave MakeSawTooth,?p-use,1)BesselLowPass,
                    >wave
                )Mix !wave
            }
        )Choose Invoke
        >wave
    }Do !wave
    
    (
        >wave,
        ?chan-sig
    )Multiply !signal
                 
    (
        >signal,
        ,
        (
            (>chan-sig dbs+1,2)Power,
            (?l-use-l,(?p-use,8)*)SinWave
        )Multiply
    )Mix  RemoveDc !signal 
}!inner-vocode

{
    ?signal Length !length
    Semitone       !step
    (>step,4)**    !step
      50           !bands
       "C0" Note   !pitch
    bunch          !m-channels
    1.100          !enhance-channels
    0.001          !gate
    1 Silence !output-signal 
    (>signal,2)DirectRelength !s-in
    Bunch !signals
    (
        1,?bands,
        {
            (?inner-vocode   Do,>signals)AddEnd !signals
            (>pitch,?step)* !pitch
        }
    )Repeat
    (?signals Mix Normalise,0.5)DirectRelength
}!vocode

{
    [((0,10),((?time,6)*,1000))Slide MakeSawtooth ToGrain !signal]
    ((0,1),((?time,6)*,-1))NumericShape  ToGrain !signal
    ((2,0.5)**,?time)* !loop-1
    ((3,0.5)**,?time)* !loop-2
    ((5,0.5)**,?time)* !loop-3
    (1,(2,0.5)**)/ !r
    Bunch !out
    (
        1,200,
        {
            !x Println
            (((?offset,?x)+,50)|,1)* !shift
            (
                (
                    -0.03,0.2,0,-1,0.2,2,
                    ?signal
                )WaveShaper pcnt+25,
                >signal pcnt+75
            )Mix Normalise !signal
            
            (
                (?signal ToGrain,?shift) [, 
                (?signal ToGrain Reverse,?loop-1)  , 
                (?signal ToGrain Reverse,?loop-2) ] 
            )MixAt Saturate !signal
            (
                ?signal Normalise dbs+6 Clip,
                ?signal Normalise dbs+6 Invert
            )Mix Normalise !clips
            (>clips,0.9,0.15,32)ResonantFilter Normalise !ring
            (>ring ,0.9,0.15,32)ResonantFilter Normalise MakeTriangle !ring
            (>ring,1000,1)BesselLowPass        Normalise !ring
            
           (?signal,250,250)Follow Normalise !cutoff
           (>cutoff,2)power                  !cutoff
           (?cutoff,((0,(2000,(50,?shift)*)+),(>cutoff length,(2000,(50,?shift)*)+))NumericShape)Multiply !cutoff-a
           ((?signal,500,6)ButterworthLowPass Normalise,250,50)Follow Normalise                   !cutoff-b
           
           ((0,0.5),((?signal length,2)/,1.5),(?signal Length,0.5))NumericShape !q
           (
            ?signal pcnt+25,
            (>signal,>cutoff-a,>q)ShapedLadderLowPass pcnt+75
           )Mix !signal 

           (>cutoff-b,2)power                  !cutoff-b
           (?cutoff-b,((0,10000),(>cutoff-b length,10000))NumericShape)Multiply !cutoff-b
           
           ((0,1.5),((?signal length,2)/,0.25),(?signal Length,1.0))NumericShape !q
           (
            ?signal pcnt+84,
            (>signal,>cutoff-b,>q)ShapedLadderLowPass pcnt-1,
            >ring pcnt+15
           )Mix !signal 
           
           (0,(?time,6)*,>signal)Cut Normalise   !signal
           (>signal,1,2)BesselHighPass Normalise !signal
           (>signal,64,2,6)RBJPeaking            !signal
           ((?signal ToGrain,((?time,2)*,?x)*),>out)AddEnd !out
        }
    )Repeat
    >out MixAt Normalise
} !synth

500 !time

0 !offset
?synth Do !left-a

1 !offset
?synth Do !right-a

(>time,10)+ !time

1 !offset
?synth Do !left-b

0 !offset
?synth Do !right-b

(
    >left-a,
    >left-b
)Mix Normalise !left

(
    >right-a,
    >right-b
)Mix Normalise !right

(?left,?right)StereoMonitor

  80 !first
  30 !offset
5000 !reflect-length

>left         !signal  !left
?do-reflector Do    !wet-left

>Right        !signal !right
?do-reflector Do    !wet-right


{
    (
        (  
            ?wet dbs-6,
            ?dry
        )Mix !signal
        ?do-reflector Do Dbs-4,
        >dry,
        >wet
    )Mix
}!make

>left      !dry
>wet-right !wet
?make Do  !left

>right     !dry
>wet-left  !wet
?make Do   !right
(
    (1 silence,0),
    (?left,50),
    (?right,50)
)MixAt dbs-9 !middle

{(>left,?middle)Mix Normalise}Do  !left

{(>right,?middle)Mix Normalise}Do !right

>middle

((>left,>right)StereoMonitor,"temp/tone.wav")WriteFile16
"Done" Println